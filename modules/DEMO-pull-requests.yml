title: Pull Requests
pre-requisites: 
learning-objective: 
screens:
  - lab:
      title: Collaborating on GitHub
      id: DEMO-pr
      presenter-script:
      introduction: |
        ## Submitting a Pull Request

        Formally, a Pull Request (PR) is a request to merge one branch into another. More than that, a PR is used to have a discussion about the changes made in the branch. The PR also keeps track of the changes made on the branch until it's complete and the team agrees it can be merged. You'll use PRs frequently when working with your team, as they're the primary way to bring code on the master branch up to date with your feature branch once it's ready for production.

        ![PR](https://raw.githubusercontent.com/wheelhouseio/curriculum-github/master/images/pull-request.png)

        You should create a PR early in the process of developing your new feature. This will allow you to get more members of your team involved in the development process.

        This video will show you how to create a Pull Request for your branch.

        <div class='container' data-video-url='https://youtu.be/kJr-PIfLDl4'></div>

        ## Getting feedback on a Pull Request

        Pull Requests are designed to make it easy for your team to provide feedback on your changes. There are two different types of comments you can create.

        * **In-line comments** are made in "Files Changed" view on a specific line of code. In line comments allow you to have specific discussions about the implementation details in your code.
        * **General comments** are made in the "Conversation" view. These comments should be used to discuss high-level architecture or the fate of the PR. 

        Comments on GitHub can be styled using <a href="https://help.github.com/articles/markdown-basics/" target="_blank">Markdown</a>. Markdown lets you include formatting such as bullets, italicization, links and images.

        In addition, you can use <a href="http://www.emoji-cheat-sheet.com/" target="_blank">Emoji</a> to communicate emotion. We find these are helpful for teams of all sizes to understand the intent behind a message.

        Finally, GitHub allows you to create several types of links within comment fields:

        * If you put a `#` before a number, it will link to the PR or Issue that is associated with that number. So `#1` will link to the first Issue or PR in your repo. You can also type a few characters in the description for a fuzzy search.
        * If you put a `@` before someone's user name, GitHub will link to their account and send them a notification. <a href="https://github.com/blog/821" target="_blank">@mentions</a> are a great way to tag people into conversations and ask for their feedback.

        ## Merging your Work

        At this point, your Pull Request should be approved and you are ready to merge it in to the `master` branch. When you merge your branch, you are taking the content and history from your feature branch and adding it to the content and history of the `master` branch.

        ![Merge](https://raw.githubusercontent.com/wheelhouseio/curriculum-github/master/images/merge.png)  

        Many project teams have established rules about who should merge a Pull Request. Some say it should be the person who created the Pull Request since they will be the ones to deal with any issues resulting from the merge. Others say it should be a single person within the project team to ensure consistency. Still others say it can be anyone other than the person who created the Pull Request. There are also third party Continuous Integration (CI) tools you can integrate with GitHub to test the build before the merge is completed.

        There are pros and cons to each approach and we will not attempt to prescribe a solution here, but these are good conversations to have within your project team.

        When you're ready to merge the PR, you will simply click the "merge" button, enter a merge message, and then confirm the merge.

        Once your PR is merged, GitHub recommends that you delete the branch associated with that PR. All your history is now saved on `master`, so you no longer need the branch. Any new features or bugfixes should be made on a new branch.


        ## Try it Out
      steps:    
        - description: "Create a PR to merge your branch into `master`."    
          id: DEMO-pr-create-pr
          verifications:
            - verification-type: pull-request
              id: DEMO-pr-create-pr-verification
              success-message: "Great job - you created the PR."
              failure-message: "It looks like you haven't created the PR yet."
        - description: "Make a line comment on one of the files in the PR \"files changed\" view."
          id: DEMO-pr-pr-line-comment
          verifications:
            - verification-type: pull-request-review-comment
              id: DEMO-pr-pr-line-comment-verification
              success-message: "Great job - you made a line comment."
              failure-message: "It looks like you haven't made a line comment yet."
        - description: "Edit the file and commit the change to the new branch."
          id: DEMO-pr-edit-pr
          verifications:
            - verification-type: file-modified
              id: DEMO-pr-edit-pr-verification
              success-message: "Great job - you committed the change."
              failure-message: "It looks like you haven't committed a change yet."
        - description: "Comment on the conversation page of the PR that it's ready to go."
          id: DEMO-pr-pr-comment
          verifications:
            - verification-type: issue-comment-created
              id: DEMO-pr-pr-comment-verification
              success-message: "Great job - you commented on the PR."
              failure-message: "It looks like you haven't commented on the PR yet."
        - description: "Merge the Pull Request."
          id: DEMO-pr-merge-pr
          verifications:
            - verification-type: pull-request-merged
              id: DEMO-pr-merge-pr-verification
              success-message: "Great job - you merged the PR."
              failure-message: "It looks like you haven't merged the PR yet."
        - description: "Delete the now unneeded branch."
          id: DEMO-pr-delete-branch
          verifications:
            - verification-type: branch-deleted
              id: DEMO-pr-delete-branch-verification
              success-message: "Great job - you deleted the branch."
              failure-message: "It looks like you haven't deleted the branch yet."
        - description: "Go back to the code view, and make sure you're on the master branch. Your file should now be listed along with all the others!"
          id: DEMO-pr-check-work
additional-labs:
additional-questions:
resources:
